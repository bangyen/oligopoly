name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read

jobs:
  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install tooling
        run: |
          just init

      - name: Run quality checks
        run: |
          just all

  e2e:
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        run: |
          cd deployment
          docker compose up --build -d
          
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 30
          
          # Check database health
          echo "Checking database health..."
          timeout 60 bash -c 'until docker compose -f deployment/docker-compose.yml exec -T db pg_isready -U user -d oligopoly; do sleep 2; done'
          
          # Check API health
          echo "Checking API health..."
          timeout 60 bash -c 'until curl -f http://localhost:8000/healthz; do sleep 2; done'
          
          echo "All services are healthy!"

      - name: Run simulation test
        run: |
          echo "Running simulation test..."
          
          # Test basic simulation
          SIM_RESPONSE=$(curl -s -X POST "http://localhost:8000/simulate" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "cournot",
              "rounds": 5,
              "params": {"a": 100.0, "b": 1.0},
              "firms": [{"cost": 10.0}, {"cost": 15.0}]
            }')
          
          echo "Simulation response: $SIM_RESPONSE"
          
          # Extract run_id
          RUN_ID=$(echo $SIM_RESPONSE | jq -r '.run_id')
          echo "Run ID: $RUN_ID"
          
          # Verify run_id is not null
          if [ "$RUN_ID" = "null" ] || [ -z "$RUN_ID" ]; then
            echo "ERROR: Failed to get run_id from simulation"
            exit 1
          fi
          
          # Test getting results
          echo "Testing results retrieval..."
          RESULTS=$(curl -s "http://localhost:8000/runs/$RUN_ID")
          echo "Results: $RESULTS"
          
          # Test heatmap generation
          echo "Testing heatmap generation..."
          HEATMAP_RESPONSE=$(curl -s -X POST "http://localhost:8000/heatmap" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "cournot",
              "firm_i": 0,
              "firm_j": 1,
              "grid_size": 10,
              "action_range": [0.0, 50.0],
              "other_actions": [],
              "params": {"a": 100.0, "b": 1.0},
              "firms": [{"cost": 10.0}, {"cost": 15.0}]
            }')
          
          echo "Heatmap response: $HEATMAP_RESPONSE"
          
          # Verify heatmap was generated successfully
          if echo "$HEATMAP_RESPONSE" | jq -e '.profit_surface' > /dev/null; then
            echo "Heatmap generated successfully!"
          else
            echo "ERROR: Failed to generate heatmap"
            exit 1
          fi
          
          echo "All e2e tests passed!"

      - name: Generate dashboard screenshot
        run: |
          echo "Generating dashboard screenshot..."
          
          # Install dependencies for screenshot generation
          pip install selenium webdriver-manager pillow
          
          # Install Flask and dependencies
          pip install -e .
          
          # Start Flask dashboard in background
          cd dashboard
          python main.py &
          DASHBOARD_PID=$!
          cd ..
          
          # Wait for dashboard to start
          sleep 10
          
          # Create screenshot script
          cat > /tmp/screenshot.py << 'EOF'
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          from selenium.webdriver.common.by import By
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC
          import time
          import os
          
          # Set up Chrome options
          chrome_options = Options()
          chrome_options.add_argument("--headless")
          chrome_options.add_argument("--no-sandbox")
          chrome_options.add_argument("--disable-dev-shm-usage")
          chrome_options.add_argument("--window-size=1920,1080")
          
          # Create driver
          driver = webdriver.Chrome(options=chrome_options)
          
          try:
              # Navigate to Flask dashboard
              driver.get("http://localhost:5050")
              
              # Wait for page to load
              WebDriverWait(driver, 30).until(
                  EC.presence_of_element_located((By.TAG_NAME, "body"))
              )
              
              # Wait a bit more for charts to render
              time.sleep(5)
              
              # Take screenshot
              screenshot_path = "/tmp/dashboard_screenshot.png"
              driver.save_screenshot(screenshot_path)
              
              # Check if screenshot was created
              if os.path.exists(screenshot_path):
                  print(f"Screenshot saved to {screenshot_path}")
              else:
                  print("ERROR: Screenshot was not created")
                  
          finally:
              driver.quit()
          EOF
          
          # Run screenshot script
          python /tmp/screenshot.py
          
          # Stop dashboard
          kill $DASHBOARD_PID 2>/dev/null || true

      - name: Upload snapshot artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-snapshot-${{ github.run_number }}
          path: |
            /tmp/dashboard_screenshot.png
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          cd deployment
          docker compose down -v